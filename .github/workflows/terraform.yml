name: Terraform  # Name of the workflow

on:
  #push:
  #  branches:
  #    - main  # Trigger the workflow on push to the main branch
  #pull_request:
  #  branches:
  #    - main  # Trigger the workflow on pull request to the main branch
  workflow_dispatch:  # Allows manual triggering of the workflow

jobs:
  terraform:
    name: 'Terraform'  # Name of the job
    runs-on: ubuntu-latest  # Use the latest Ubuntu runner
    environment: development  # Specify the environment

    env:
      AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION }}  # Reference the environment variable for AWS region

    steps:
      - name: 'Checkout GitHub Action'
        uses: actions/checkout@v2  # Check out the repository code

      - name: 'Setup Terraform'
        uses: hashicorp/setup-terraform@v1  # Set up Terraform
        with:
          terraform_version: 1.0.0  # Specify the Terraform version

      - name: 'Debug AWS Region'
        run: echo "AWS_DEFAULT_REGION=${{ env.AWS_DEFAULT_REGION }}"  # Output the AWS region for debugging

      - name: 'Configure AWS Credentials'
        uses: aws-actions/configure-aws-credentials@v1  # Configure AWS credentials
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}  # Use the AWS access key ID from secrets
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  # Use the AWS secret access key from secrets
          aws-region: ${{ env.AWS_DEFAULT_REGION }}  # Use the AWS region from the environment variable

      - name: 'Terraform Init'
        run: terraform init  # Initialize Terraform

      - name: 'Terraform Apply - BLUE - GREEN TBD' 
        run: terraform apply -auto-approve  # Apply Terraform-managed infrastructure
        
      - name: 'Prompt for Terraform Destroy'
        id: input1
        run: |
          echo "Do you want to proceed with terraform destroy? (yes/no)"
          read answer
          echo "::set-output name=answer::$answer"
    
      - name: 'Confirm Terraform Destroy'
        if: steps.input1.outputs.answer == 'yes'
        id: input2
        run: |
          echo "Are you sure you want to proceed with terraform destroy? (yes/no)"
          read confirm
          echo "::set-output name=confirm::$confirm"      

      - name: 'Terraform Destroy'
        if: steps.input2.outputs.confirm == 'yes'
        run: terraform destroy -auto-approve  # Destroy Terraform-managed infrastructure

      - name: 'Exit Message'
        if: steps.input1.outputs.answer != 'yes' || steps.input2.outputs.confirm != 'yes'
        run: echo "OK Bye"
